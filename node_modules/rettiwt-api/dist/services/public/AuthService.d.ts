import { IRettiwtConfig } from '../../types/RettiwtConfig';
import { FetcherService } from './FetcherService';
/**
 * The services that handles authentication.
 *
 * @public
 */
export declare class AuthService extends FetcherService {
    /**
     * @param config - The config object for configuring the `Rettiwt` instance.
     *
     * @internal
     */
    constructor(config?: IRettiwtConfig);
    /**
     * Login to twitter as guest.
     *
     * @returns A new guest key.
     *
     * @example
     * ```
     * import { Rettiwt } from 'rettiwt-api';
     *
     * // Creating a new Rettiwt instance
     * const rettiwt = new Rettiwt();
     *
     * // Logging in an getting a new guest key
     * rettiwt.auth.guest()
     * .then(guestKey => {
     * 	// Use the guest key
     * 	...
     * })
     * .catch(err => {
     * 	console.log(err);
     * });
     * ```
     */
    guest(): Promise<string>;
    /**
     * Login to twitter using account credentials.
     *
     * @param email - The email id associated with the Twitter account.
     * @param userName - The username associated with the Twitter account.
     * @param password - The password to the Twitter account.
     *
     * @returns The `API_KEY` for the Twitter account.
     *
     * @example
     * ```
     * import { Rettiwt } from 'rettiwt-api';
     *
     * // Creating a new Rettiwt instance
     * const rettiwt = new Rettiwt();
     *
     * // Logging in an getting the API_KEY
     * rettiwt.auth.login("email@domain.com", "username", "password")
     * .then(apiKey => {
     * 	// Use the API_KEY
     * 	...
     * })
     * .catch(err => {
     * 	console.log(err);
     * });
     * ```
     *
     * @remarks
     * Interchanging `email` and `userName` works too.
     */
    login(email: string, userName: string, password: string): Promise<string>;
}
